import telebot
from telebot import types
import sqlite3
from datetime import datetime, date
import config_taxibot

connect = sqlite3.connect('TAXIdata.db')
cursor = connect.cursor()
cursor.execute('''CREATE TABLE IF NOT EXISTS making_orders
             (id INTEGER PRIMARY KEY,
              username TEXT,
              first_name TEXT,
              last_name TEXT,
              phone_number TEXT,
              message_id INTEGER,
              user_adress TEXT,
              message TEXT,
              end_adress TEXT,
              sale TEXT,
              del_msg_id INTEGER,
              del_msg_id2 INTEGER,
              msg_id_order INTEGER,
              driver_msg_id_order INTEGER,
              who_accept TEXT,
              ordermid INTEGER,
              permissions TEXT,
              key TEXT,
              date TEXT,
              time1 TEXT,
              time2 TEXT,
              page TEXT)''')

cursor.execute('''CREATE TABLE IF NOT EXISTS drivers
             (id INTEGER PRIMARY KEY,
              status TEXT,
              order_status TEXT,
              username TEXT,
              phone_number TEXT,
              fio TEXT,
              car TEXT,
              state_number TEXT,
              trips INTEGER)''')

cursor.execute('''CREATE TABLE IF NOT EXISTS orders
             (order_number INTEGER PRIMARY KEY AUTOINCREMENT,
              customer_phone TEXT,
              driver TEXT,
              date TEXT,
              time TEXT,
              user_adress TEXT,
              end_adress TEXT,
              sale TEXT)''')

cursor.execute('''CREATE TABLE IF NOT EXISTS configuration
             (id_group INTEGER PRIMARY KEY)''')

connect.commit()
connect.close()


class Bot:
    def __init__(self, token):
        self.bot = telebot.TeleBot(token)
        self.id_group = config_taxibot.id_group
        self.btn_cancel = types.InlineKeyboardButton(
            text='–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ ‚ùå',
            callback_data='main'
        )

    def start(self):

        @self.bot.message_handler(commands=['start'])
        def command_start(message):
            if message.from_user.username is None:
                keyboard = types.InlineKeyboardMarkup(row_width=1)
                btn_how = types.InlineKeyboardButton(text='–ö–∞–∫ —É–∫–∞–∑–∞—Ç—å?',
                                                     callback_data='how'
                                                     )
                keyboard.add(btn_how)
                self.bot.send_message(chat_id=message.chat.id,
                                      text=f'‚ÑπÔ∏è {message.from_user.first_name}, –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–∏—Å–∞ —É –≤–∞—Å –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –¥–æ–ª–∂–Ω–æ'
                                           f'–±—ã—Ç—å —É–∫–∞–∑–∞–Ω–æ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!',
                                      reply_markup=keyboard
                                      )
            else:
                try:
                    keyboard = types.ReplyKeyboardMarkup(row_width=1,
                                                         resize_keyboard=True,
                                                         one_time_keyboard=True
                                                         )
                    btn_number = types.KeyboardButton(text='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ üì≤',
                                                      request_contact=True
                                                      )
                    keyboard.add(btn_number)
                    self.bot.send_message(chat_id=message.chat.id,
                                          text=f'‚ÑπÔ∏è {message.from_user.first_name}, –í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–æ—Ç –¥–∏—Å–ø–µ—Ç—á–µ—Ä —Ç–∞–∫—Å–∏! '
                                               f'–¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.',
                                          reply_markup=keyboard
                                          )
                    self.bot.register_next_step_handler(message, contact)
                except:
                    pass

        # @self.bot.message_handler(commands=['remove'])
        # def handle_contact(message):
        #     self.bot.send_message(message.chat.id, '–ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∞.', reply_markup=types.ReplyKeyboardRemove())

        @self.bot.message_handler(content_types=['contact'])
        def contact(message):
            if message.from_user.username is None:
                keyboard = types.InlineKeyboardMarkup(row_width=1)
                btn_how = types.InlineKeyboardButton(text='–ö–∞–∫ —É–∫–∞–∑–∞—Ç—å?',
                                                     callback_data='how'
                                                     )
                keyboard.add(btn_how)
                self.bot.send_message(chat_id=message.chat.id,
                                      text=f'‚ÑπÔ∏è {message.from_user.first_name}, –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–∏—Å–∞ —É –≤–∞—Å –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –¥–æ–ª–∂–Ω–æ'
                                           f'–±—ã—Ç—å —É–∫–∞–∑–∞–Ω–æ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!',
                                      reply_markup=keyboard
                                      )
            else:
                try:
                    keyboard = types.InlineKeyboardMarkup(row_width=1)
                    btn_main = types.InlineKeyboardButton(text='–ù–∞—á–∞—Ç—å ‚ñ∂Ô∏è',
                                                          callback_data='main'
                                                          )
                    keyboard.add(btn_main)

                    # now = datetime.now()
                    # current_time = now.strftime("%H:%M:%S")
                    #
                    # current_date = date.today()
                    conn = sqlite3.connect('TAXIdata.db')
                    cursor = conn.cursor()
                    cursor.execute(f'SELECT id FROM making_orders WHERE id = {message.contact.user_id}')
                    data = cursor.fetchone()
                    if data is None:
                        self.bot.send_message(chat_id=message.chat.id,
                                              text='–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω ‚úÖ',
                                              reply_markup=types.ReplyKeyboardRemove(),
                                              )
                        self.bot.send_message(chat_id=message.chat.id,
                                              text='–ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–±–æ—Ç—É?',
                                              reply_markup=keyboard
                                              )
                        cursor.execute('''INSERT INTO making_orders 
                                                (id, 
                                                username, 
                                                first_name, 
                                                last_name, 
                                                phone_number)
                                                VALUES (?, ?, ?, ?, ?)''',
                                       (
                                           message.contact.user_id,
                                           message.from_user.username,
                                           message.contact.first_name,
                                           message.contact.last_name,
                                           message.contact.phone_number)
                                       )
                        conn.commit()
                        conn.close()
                    else:
                        self.bot.send_message(chat_id=message.chat.id,
                                              text=f'‚ÑπÔ∏è {message.from_user.first_name}, –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.',
                                              reply_markup=types.ReplyKeyboardRemove()
                                              )
                        self.bot.send_message(chat_id=message.chat.id,
                                              text='–ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–±–æ—Ç—É?',
                                              reply_markup=keyboard
                                              )
                except:
                    pass

        @self.bot.callback_query_handler(func=lambda callback: callback.data)
        def check_callback(callback):

            """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è —á–∞—Å—Ç—å"""
            if callback.data == 'how':
                self.bot.send_message(chat_id=callback.message.chat.id,
                                      text='–î–ª—è —É–∫–∞–∑–∞–Ω–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–ª–µ–¥—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–º —à–∞–≥–∞–º:'
                                           '\n–í —Ç–µ–ª–µ–≥—Ä–∞–º–º –æ—Ç–∫—Ä–æ–π—Ç–µ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"'
                                           '\n–û–∫–æ–ª–æ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ "–ò–∑–º–µ–Ω–∏—Ç—å"'
                                           '\n–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –∏ —É–∫–∞–∂–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
                                      )

            if callback.data == 'main':

                conn = sqlite3.connect('TAXIdata.db')
                cursor = conn.cursor()
                cursor.execute(f"SELECT driver_msg_id_order FROM making_orders WHERE id = {callback.message.chat.id}")
                dmid = cursor.fetchone()
                if dmid[0] is None:
                    pass
                else:
                    cursor.execute(f"SELECT id_group FROM configuration")
                    gid = cursor.fetchone()
                    if gid[0] is None:
                        pass
                    else:
                        cursor.execute(f"SELECT who_accept FROM making_orders WHERE id = ?",
                                       (callback.message.chat.id,))
                        cmi = cursor.fetchone()
                        if cmi[0] is None:
                            try:
                                self.bot.edit_message_text(chat_id=gid[0],
                                                           message_id=dmid[0],
                                                           text='–ó–∞–∫–∞–Ω –æ—Ç–º–µ–Ω–µ–Ω.'
                                                           )
                            except:
                                pass
                        else:
                            pass
                        try:
                            self.bot.delete_message(chat_id=gid[0],
                                                    message_id=dmid[0] + 1
                                                    )
                            self.bot.delete_message(chat_id=gid[0],
                                                    message_id=dmid[0] + 2
                                                    )
                        except:
                            pass
                cursor.execute(
                    f"UPDATE making_orders SET "
                    f"message_id = NULL,"
                    f"user_adress = NULL,"
                    f"message = NULL,"
                    f"sale = NULL,"
                    f"del_msg_id = NULL,"
                    f"del_msg_id2 = NULL,"
                    f"msg_id_order = NULL,"
                    f"driver_msg_id_order = NULL,"
                    f"who_accept = NULL,"
                    f"ordermid = NULL,"
                    f"date = NULL,"
                    f"time1 = NULL,"
                    f"time2 = NULL,"
                    f"page = NULL,"
                    f"end_adress = NULL WHERE id = {callback.message.chat.id}"
                )
                keyboard = types.InlineKeyboardMarkup()
                btn_order = types.InlineKeyboardButton(text='–ó–∞–∫–∞–∑–∞—Ç—å –º–∞—à–∏–Ω—É üöï',
                                                       callback_data='order'
                                                       )
                keyboard.add(btn_order)
                cursor.execute(f"SELECT status FROM drivers")
                data = cursor.fetchall()
                drivers = 0
                for i in range(len(data)):
                    drivers += data[i][0]
                if drivers >= 1:
                    sms = f'–í–æ–¥–∏—Ç–µ–ª–µ–π –Ω–∞ —Å–º–µ–Ω–µ: {drivers}üë§.'
                else:
                    sms = f'–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–∞ —Å–º–µ–Ω–µ –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç.'

                cursor.execute(f"SELECT order_status FROM drivers")
                work_drivers = cursor.fetchall()
                wd = 0
                for i in range(len(work_drivers)):
                    wd += work_drivers[i][0]
                if wd >= 1:
                    sms2 = f'–°–≤–æ–±–æ–¥–Ω–æ –≤–æ–¥–∏—Ç–µ–ª–µ–π: {wd}.'
                else:
                    sms2 = f'–í—Å–µ –≤–æ–¥–∏—Ç–µ–ª–∏ –∑–∞–Ω—è—Ç—ã.'

                self.bot.edit_message_text(chat_id=callback.message.chat.id,
                                           message_id=callback.message.id,
                                           text=f'{callback.from_user.first_name}, \n{sms}\n{sms2}',
                                           reply_markup=keyboard
                                           )
                conn.commit()
                conn.close()

            if callback.data == 'order':

                conn = sqlite3.connect('TAXIdata.db')
                cursor = conn.cursor()
                cursor.execute("SELECT "
                               "user_adress,"
                               "end_adress,"
                               "message,"
                               "message_id,"
                               "sale"
                               " FROM making_orders WHERE id = ?", (callback.message.chat.id,)
                               )

                result = cursor.fetchone()

                if result[0] is None:
                    line_user_adress = '–ù–µ —É–∫–∞–∑–∞–Ω'
                else:
                    if result[3] is None:
                        line_user_adress = result[0]
                    else:
                        line_user_adress = '–£–∫–∞–∑–∞–Ω –Ω–∞ –∫–∞—Ä—Ç–µ'

                if result[1] is None:
                    line_end_adress = '–ù–µ —É–∫–∞–∑–∞–Ω'
                else:
                    line_end_adress = result[1]

                if result[2] is None:
                    line_message_for_driver = '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
                else:
                    line_message_for_driver = result[2]

                if result[4] is None:
                    line_sale = '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ø–æ –≥–æ—Ä–æ–¥—É - 100—Ä'
                else:
                    line_sale = result[4]
                keyboard = types.InlineKeyboardMarkup(row_width=1)

                btn_give_user_adress = types.InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∞–¥—Ä–µ—Å üè†',
                                                                  callback_data='give_user_adress'
                                                                  )
                btn_give_end_adress = types.InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–Ω–µ—á–Ω—ã–π –∞–¥—Ä–µ—Å üè°',
                                                                 callback_data='give_end_adress'
                                                                 )
                # btn_child_seat = types.InlineKeyboardButton(text='–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–µ—Ç—Å–∫–æ–µ –∫—Ä–µ—Å–ª–æ',
                #                                             callback_data='child_seat'
                #                                             )
                btn_sale = types.InlineKeyboardButton(text='–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–µ–∑–¥–∫–∏ üíµ',
                                                      callback_data='give_sale')
                btn_message_for_driver = types.InlineKeyboardButton(text='–°–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª—è ‚úâÔ∏è',
                                                                    callback_data='message_for_driver'
                                                                    )
                btn_order_ready = types.InlineKeyboardButton(text='–ó–∞–∫–∞–∑ –≥–æ—Ç–æ–≤ ‚úÖ',
                                                             callback_data='order_is_ready'
                                                             )
                btn_admin_menu = types.InlineKeyboardButton(text='–û—Ç—á–µ—Ç –æ –ø–æ–µ–∑–¥–∫–∞—Ö üìÑ',
                                                            callback_data='otchet'
                                                            )
                if result[0] is None:
                    keyboard.add(btn_give_user_adress,
                                 btn_give_end_adress,
                                 btn_sale,
                                 btn_message_for_driver,
                                 self.btn_cancel
                                 )
                else:
                    if result[1] is None:
                        keyboard.add(btn_give_user_adress,
                                     btn_give_end_adress,
                                     btn_sale,
                                     btn_message_for_driver,
                                     self.btn_cancel
                                     )
                    else:
                        keyboard.add(btn_give_user_adress,
                                     btn_give_end_adress,
                                     btn_sale,
                                     btn_message_for_driver,
                                     btn_order_ready,
                                     self.btn_cancel
                                     )
                cursor.execute(f"SELECT permissions FROM making_orders WHERE id = ?",
                               (callback.message.chat.id,))
                admin = cursor.fetchone()
                if admin[0] is None:
                    pass
                else:
                    keyboard.add(btn_admin_menu)
                try:
                    self.bot.edit_message_text(chat_id=callback.message.chat.id,
                                               message_id=callback.message.id,
                                               text=f'{callback.from_user.first_name}, –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.:'
                                                    f'\nüè† –í–∞—à –∞–¥—Ä–µ—Å: {line_user_adress}'
                                                    f'\nüè° –ö–æ–Ω–µ—á–Ω—ã–π –∞–¥—Ä–µ—Å: {line_end_adress}'
                                                    f'\nüíµ –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–µ–∑–¥–∫–∏: {line_sale}'
                                                    f'\n‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª—è: {line_message_for_driver}'
                                                    f'\n–ü–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª—è.',
                                               reply_markup=keyboard
                                               )
                except:
                    pass
                conn.commit()
                conn.close()

            if callback.data == 'give_user_adress':
                keyboard = types.InlineKeyboardMarkup(row_width=1)
                btn_auto = types.InlineKeyboardButton(text='–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏',
                                                      callback_data='auto'
                                                      )
                btn_manually = types.InlineKeyboardButton(text='–í—Ä—É—á–Ω—É—é',
                                                          callback_data='manually'
                                                          )
                keyboard.add(btn_auto,
                             btn_manually,
                             )
                del_msg_0 = self.bot.edit_message_text(chat_id=callback.message.chat.id,
                                                       message_id=callback.message.id,
                                                       text=f'‚ÑπÔ∏è {callback.from_user.first_name}, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —É–∫–∞–∑–∞–Ω–∏—è –≤–∞—à–µ–≥–æ –∞–¥—Ä–µ—Å–∞',
                                                       reply_markup=keyboard
                                                       )
                conn = sqlite3.connect('TAXIdata.db')
                cursor = conn.cursor()
                cursor.execute(
                    f"UPDATE making_orders SET del_msg_id2 = {del_msg_0.message_id} WHERE id = {callback.message.chat.id}")
                conn.commit()
                conn.close()

            if callback.data == 'auto':
                keyboard1 = types.ReplyKeyboardMarkup(row_width=1,
                                                      resize_keyboard=True,
                                                      one_time_keyboard=True
                                                      )

                btn_geo = types.KeyboardButton(text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥—Ä–µ—Å',
                                               request_location=True,
                                               )
                keyboard1.add(btn_geo)
                del_msg_1 = self.bot.send_message(chat_id=callback.message.chat.id,
                                                  text=f'{callback.from_user.first_name}, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ. –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π –Ω–∞–∂–º–∏—Ç–µ "–í—Ä—É—á–Ω—É—é"',
                                                  reply_markup=keyboard1
                                                  )
                conn = sqlite3.connect('TAXIdata.db')
                cursor = conn.cursor()
                cursor.execute(
                    f"UPDATE making_orders SET del_msg_id = {del_msg_1.message_id} WHERE id = {callback.message.chat.id}")
                conn.commit()
                conn.close()

            if callback.data == 'manually':
                conn = sqlite3.connect('TAXIdata.db')
                cursor = conn.cursor()
                try:
                    cursor.execute(
                        f"SELECT del_msg_id FROM making_orders WHERE id = {callback.message.chat.id}")
                    delmsg2 = cursor.fetchone()
                    if delmsg2[0] is None:
                        pass
                    else:
                        self.bot.delete_message(chat_id=callback.message.chat.id,
                                                message_id=delmsg2[0]
                                                )
                except:
                    pass
                keyboard = types.InlineKeyboardMarkup(row_width=1)
                btn_cancel = types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞',
                                                        callback_data='order')
                keyboard.add(btn_cancel)
                del_msg_2 = self.bot.edit_message_text(chat_id=callback.message.chat.id,
                                                       message_id=callback.message.id,
                                                       text=f'‚ÑπÔ∏è {callback.from_user.first_name}, —É–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å, –∫—É–¥–∞ –¥–æ–ª–∂–µ–Ω –ø–æ–¥—ä–µ—Ö–∞—Ç—å –≤–æ–¥–∏—Ç–µ–ª—å',
                                                       reply_markup=keyboard
                                                       )
                cursor.execute(
                    f"UPDATE making_orders SET del_msg_id = {del_msg_2.message_id} WHERE id = {callback.message.chat.id}")
                conn.commit()
                conn.close()

                self.bot.register_next_step_handler(callback.message, get_user_adress_manually)

            if callback.data == 'give_end_adress':
                keyboard = types.InlineKeyboardMarkup(row_width=1)
                btn_cancel = types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞',
                                                        callback_data='order'
                                                        )

                keyboard.add(btn_cancel)

                del_msg_3 = self.bot.edit_message_text(chat_id=callback.message.chat.id,
                                                       message_id=callback.message.id,
                                                       text=f'‚ÑπÔ∏è {callback.from_user.first_name}, —É–∫–∞–∂–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—ã–π –∞–¥—Ä–µ—Å –ø–æ–µ–∑–¥–∫–∏',
                                                       reply_markup=keyboard
                                                       )
                conn = sqlite3.connect('TAXIdata.db')
                cursor = conn.cursor()
                cursor.execute(
                    f"UPDATE making_orders SET del_msg_id = {del_msg_3.message_id} WHERE id = {callback.message.chat.id}")
                conn.commit()
                conn.close()

                self.bot.register_next_step_handler(callback.message, get_end_adress)

            if callback.data == 'give_sale':
                keyboard = types.InlineKeyboardMarkup(row_width=1)
                btn_give_sale = types.InlineKeyboardButton(text='–£–∫–∞–∑–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å üíµ',
                                                           callback_data='user_give_sale'
                                                           )
                btn_no_give_sale = types.InlineKeyboardButton(text='–û—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â—É—é (100—Ä.) ‚ùå',
                                                              callback_data='order'
                                                              )
                keyboard.add(btn_give_sale,
                             btn_no_give_sale
                             )
                self.bot.edit_message_text(chat_id=callback.message.chat.id,
                                           message_id=callback.message.id,
                                           text=f'‚ÑπÔ∏è {callback.from_user.first_name},'
                                                f'—Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–µ–∑–¥–∫–∏ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –≥–æ—Ä–æ–¥–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 100—Ä.'
                                                f'–ï—Å–ª–∏ —Å—Ä–æ—á–Ω–æ –Ω—É–∂–Ω–∞ –º–∞—à–∏–Ω–∞, —É–∫–∞–∂–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –±–æ–ª—å—à–µ.'
                                                f'–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–µ–∑–¥–∫–∏ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –≥–æ—Ä–æ–¥–∞ –¥–æ–≥–æ–≤–∞—Ä–∏–≤–∞–µ—Ç—Å—è —Å –≤–æ–¥–∏—Ç–µ–ª–µ–º.',
                                           reply_markup=keyboard
                                           )

            if callback.data == 'message_for_driver':
                keyboard = types.InlineKeyboardMarkup()
                btn_cancel = types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞ ‚ùå',
                                                        callback_data='order'
                                                        )
                keyboard.add(btn_cancel)
                del_msg_4 = self.bot.edit_message_text(chat_id=callback.message.chat.id,
                                                       message_id=callback.message.id,
                                                       text=f'‚ÑπÔ∏è {callback.from_user.first_name}, –≤–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª—è',
                                                       reply_markup=keyboard
                                                       )
                conn = sqlite3.connect('TAXIdata.db')
                cursor = conn.cursor()
                cursor.execute(
                    f"UPDATE making_orders SET del_msg_id = {del_msg_4.message_id} WHERE id = {callback.message.chat.id}")
                conn.commit()
                conn.close()

                self.bot.register_next_step_handler(callback.message, message_for_driver)

            if callback.data == 'user_give_sale':
                keyboard = types.InlineKeyboardMarkup()
                btn_cancel = types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞ ‚ùå',
                                                        callback_data='order'
                                                        )
                keyboard.add(btn_cancel)
                del_msg_5 = self.bot.edit_message_text(chat_id=callback.message.chat.id,
                                                       message_id=callback.message.id,
                                                       text=f'‚ÑπÔ∏è {callback.from_user.first_name}, —É–∫–∞–∂–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å',
                                                       reply_markup=keyboard
                                                       )
                conn = sqlite3.connect('TAXIdata.db')
                cursor = conn.cursor()
                cursor.execute(
                    f"UPDATE making_orders SET del_msg_id = {del_msg_5.message_id} WHERE id = {callback.message.chat.id}")
                conn.commit()
                conn.close()

                self.bot.register_next_step_handler(callback.message, give_user_sale)

            if callback.data == 'order_is_ready':

                conn = sqlite3.connect('TAXIdata.db')
                cursor = conn.cursor()
                cursor.execute("SELECT "
                               "user_adress,"
                               "end_adress,"
                               "message,"
                               "message_id,"
                               "sale"
                               " FROM making_orders WHERE id = ?", (callback.message.chat.id,))
                result = cursor.fetchone()
                conn.close()

                if result[3] is None:
                    line_u_a = result[0]
                else:
                    line_u_a = '–£–∫–∞–∑–∞–Ω –Ω–∞ –∫–∞—Ä—Ç–µ'

                if result[2] is None:
                    line_m_f_d = '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
                else:
                    line_m_f_d = result[2]

                if result[4] is None:
                    line_s = '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è - 100—Ä'
                else:
                    line_s = result[4]

                keyboard = types.InlineKeyboardMarkup(row_width=1)
                btn_right = types.InlineKeyboardButton(text='–í–µ—Ä–Ω–æ, –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ ‚úÖ',
                                                       callback_data='get_order'
                                                       )
                btn_back = types.InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ ‚úèÔ∏è',
                                                      callback_data='order'
                                                      )
                keyboard.add(btn_right,
                             btn_back,
                             self.btn_cancel
                             )
                self.bot.edit_message_text(chat_id=callback.message.chat.id,
                                           message_id=callback.message.id,
                                           text=f'‚ÑπÔ∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö ‚ÄºÔ∏è'
                                                f'\nüè† –í–∞—à –∞–¥—Ä–µ—Å: {line_u_a}'
                                                f'\nüè° –ö–æ–Ω–µ—á–Ω—ã–π –∞–¥—Ä–µ—Å: {result[1]}'
                                                f'\nüíµ –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–µ–∑–¥–∫–∏: {line_s}'
                                                f'\n‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª—è: {line_m_f_d}',
                                           reply_markup=keyboard
                                           )

            if callback.data == 'get_order':

                conn = sqlite3.connect('TAXIdata.db')
                cursor = conn.cursor()
                cursor.execute(f"UPDATE making_orders SET username = ? WHERE id = ?",
                               (callback.from_user.username, callback.message.chat.id))
                conn.commit()
                cursor.execute("SELECT "
                               "user_adress,"
                               "end_adress,"
                               "message,"
                               "message_id,"
                               "sale,"
                               "first_name,"
                               "phone_number,"
                               "msg_id_order,"
                               "username"
                               " FROM making_orders WHERE id = ?", (callback.message.chat.id,))
                result = cursor.fetchone()
                cursor.execute("SELECT id_group FROM configuration")
                id_group = cursor.fetchone()

                if result[3] is None:
                    line_user_adr = result[0]
                else:
                    line_user_adr = '–£–∫–∞–∑–∞–Ω –Ω–∞ –∫–∞—Ä—Ç–µ'
                if result[4] is None:
                    line_sal = '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è - 100—Ä'
                else:
                    line_sal = result[4]
                if result[2] is None:
                    line_mfd = '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
                else:
                    line_mfd = result[2]

                if result[7] is None:

                    keyboard = types.InlineKeyboardMarkup()
                    btn_cancel_order = types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ ‚ùå',
                                                                  callback_data='really_cancel'
                                                                  )
                    keyboard.add(btn_cancel_order)

                    order_id = self.bot.edit_message_text(chat_id=callback.message.chat.id,
                                                          message_id=callback.message.id,
                                                          text=f'‚ÑπÔ∏è {callback.from_user.first_name}, –í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω! –û–∂–∏–¥–∞–π—Ç–µ, –ø–æ–∫–∞ –µ–≥–æ –ø—Ä–∏–º—É—Ç.'
                                                               f'\nüè† –í–∞—à –∞–¥—Ä–µ—Å: {line_user_adr}'
                                                               f'\nüè° –ö–æ–Ω–µ—á–Ω—ã–π –∞–¥—Ä–µ—Å: {result[1]}'
                                                               f'\nüíµ –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–µ–∑–¥–∫–∏: {line_sal}'
                                                               f'\n‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª—è: {line_mfd}',
                                                          reply_markup=keyboard
                                                          )
                    cursor.execute(f"UPDATE making_orders SET msg_id_order = ? WHERE id = ?",
                                   (order_id.message_id, callback.message.chat.id,))

                    driver_keyboard = types.InlineKeyboardMarkup()
                    driver_btn_accept_order = types.InlineKeyboardButton(text='–ü—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑',
                                                                         callback_data='driver_accept'
                                                                         )
                    driver_btn_conn = types.InlineKeyboardButton(text='–°–≤—è–∑—å –∫ –∑–∞–∫–∞–∑—á–∏–∫–æ–º',
                                                                 url=f't.me/{result[8]}')
                    cursor.execute(f"SELECT username FROM making_orders WHERE id = ?",
                                   (callback.message.chat.id,))
                    uiid = cursor.fetchone()
                    # driver_btn_conn = types.InlineKeyboardButton(text='–°–≤—è–∑—å —Å –∫–ª–∏–µ–Ω—Ç–æ–º', url=f'https://t.me/{uiid[0]}'),

                    driver_keyboard.add(driver_btn_accept_order,
                                        driver_btn_conn
                                        )

                    driver_order_id = self.bot.send_message(chat_id=id_group[0],
                                                            text=f'–ó–∞–∫–∞–∑—á–∏–∫: {result[5]},'
                                                                 f'\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∑–∞–∫–∞–∑—á–∏–∫–∞: {result[6]},'
                                                                 f'\n–ê–¥—Ä–µ—Å –∑–∞–∫–∞–∑—á–∏–∫–∞: {line_user_adr},'
                                                                 f'\n–ö–æ–Ω–µ—á–Ω—ã–π –∞–¥—Ä–µ—Å –ø–æ–µ–∑–¥–∫–∏: {result[1]},'
                                                                 f'\n–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–µ–∑–¥–∫–∏: {line_sal},'
                                                                 f'\n–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∑–∞–∫–∞–∑—á–∏–∫–∞: {line_mfd}',
                                                            reply_markup=driver_keyboard
                                                            )
                    cursor.execute(
                        f"UPDATE making_orders SET driver_msg_id_order = '{driver_order_id.message_id}' WHERE id = {callback.message.chat.id}")
                    conn.commit()
                    conn.close()
                    if result[3] is None:
                        pass
                    else:
                        self.bot.forward_message(chat_id=id_group[0],
                                                 from_chat_id=callback.message.chat.id,
                                                 message_id=result[3],
                                                 )
                        self.bot.send_message(chat_id=id_group[0],
                                              text=f'–ê–¥—Ä–µ—Å –∑–∞–∫–∞–∑—á–∏–∫–∞ {result[5]} –Ω–∞ –∫–∞—Ä—Ç–µ.'
                                              )
                # else:
                #     keyboard = types.InlineKeyboardMarkup()
                #     keyboard.add(self.btn_cancel)
                #     self.bot.edit_message_text(chat_id=callback.message.chat.id,
                #                                message_id=callback.message.id,
                #                                text=f'‚ÑπÔ∏è {callback.from_user.first_name}, –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑! –û—Ç–º–µ–Ω–∏—Ç—å?',
                #                                reply_markup=keyboard
                #                                )

            if callback.data == 'really_cancel':
                keyboard = types.InlineKeyboardMarkup()

                btn_no_cancel = types.InlineKeyboardButton(text='–ù–µ –æ—Ç–º–µ–Ω—è—Ç—å ‚úÖ',
                                                           callback_data='get_order')

                btn_really_cancel = types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å ‚ùå',
                                                               callback_data='main'
                                                               )
                keyboard.add(btn_no_cancel,
                             btn_really_cancel
                             )
                self.bot.edit_message_text(chat_id=callback.message.chat.id,
                                           message_id=callback.message.id,
                                           text=f'‚ÑπÔ∏è {callback.from_user.first_name}, –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑?',
                                           reply_markup=keyboard
                                           )

            """–í–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è —á–∞—Å—Ç—å"""

            if callback.data == 'driver_accept' or callback.data == 'zabral':

                conn = sqlite3.connect('TAXIdata.db')
                cursor = conn.cursor()
                cursor.execute(f"SELECT id_group FROM configuration")
                gid = cursor.fetchone()
                cursor.execute(f"SELECT id FROM drivers WHERE username = ?",
                               (callback.from_user.username,))
                res = cursor.fetchone()
                if callback.data == 'driver_accept':

                    cursor.execute(f"UPDATE drivers SET order_status = ? WHERE id = ?",
                                   (0, callback.message.chat.id,))
                    cursor.execute(f"SELECT phone_number FROM making_orders")
                    phone_numbers = cursor.fetchall()
                    for i in range(len(phone_numbers)):
                        if phone_numbers[i][0] in callback.message.text:
                            cursor.execute("UPDATE making_orders SET who_accept = ? WHERE phone_number = ?",
                                           (callback.from_user.username, phone_numbers[i][0]))
                            conn.commit()

                    um = callback.from_user.username
                    cursor.execute(
                        f"SELECT id, msg_id_order, driver_msg_id_order, username FROM making_orders WHERE who_accept = ?",
                        (um,))
                    data = cursor.fetchone()
                    cursor.execute(
                        f"SELECT username, phone_number, fio, car, state_number FROM drivers WHERE username = ?",
                        (um,))
                    driver1 = cursor.fetchone()
                    keyboard = types.InlineKeyboardMarkup()
                    btn_conn = types.InlineKeyboardButton(text='–°–≤—è–∑—å —Å –≤–æ–¥–∏—Ç–µ–ª–µ–º', url=f'https://t.me/{driver1[0]}')
                    keyboard.add(btn_conn)

                    ordermid = self.bot.edit_message_text(chat_id=data[0],
                                                          message_id=data[1],
                                                          text=f'‚ÑπÔ∏è –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç!'
                                                               f'\n–í–æ–¥–∏—Ç–µ–ª—å: {driver1[2]}'
                                                               f'\n–ê–≤—Ç–æ–º–æ–±–∏–ª—å: {driver1[3]} {driver1[4]}'
                                                               f'\n–¢–µ–ª–µ—Ñ–æ–Ω –≤–æ–¥–∏—Ç–µ–ª—è: {driver1[1]}',
                                                          reply_markup=keyboard
                                                          )
                    cursor.execute(f"UPDATE making_orders SET ordermid = ? WHERE who_accept = ?",
                                   (ordermid.message_id, callback.from_user.username,))
                    self.bot.forward_message(from_chat_id=callback.message.chat.id,
                                             chat_id=res[0],
                                             message_id=callback.message.id
                                             )
                    self.bot.edit_message_text(chat_id=gid[0],
                                               message_id=data[2],
                                               text=f'‚ÑπÔ∏è –ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –≤–æ–¥–∏—Ç–µ–ª–µ–º {callback.from_user.first_name}'
                                               )
                    cursor.execute(f"SELECT message_id, id FROM making_orders WHERE who_accept = ?",
                                   (callback.from_user.username,))
                    geo = cursor.fetchone()
                    if geo[0] is not None:
                        self.bot.forward_message(from_chat_id=geo[1],
                                                 chat_id=res[0],
                                                 message_id=geo[0]
                                                 )
                        self.bot.delete_message(chat_id=gid[0],
                                                message_id=data[2] + 1
                                                )
                        self.bot.delete_message(chat_id=gid[0],
                                                message_id=data[2] + 2
                                                )
                    keyboard2 = types.InlineKeyboardMarkup(row_width=1)
                    btn_conn2 = types.InlineKeyboardButton(text='–°–≤—è–∑—å —Å –∑–∞–∫–∞–∑—á–∏–∫–æ–º',
                                                           url=f'https://t.me/{data[3]}'
                                                           )
                    btn_pod = types.InlineKeyboardButton(text='–Ø –ø–æ–¥—ä–µ—Ö–∞–ª',
                                                         callback_data='driver_pod'
                                                         )
                    btn_zabral = types.InlineKeyboardButton(text='–ó–∞–±—Ä–∞–ª –∑–∞–∫–∞–∑—á–∏–∫–∞',
                                                            callback_data='zabral'
                                                            )
                    keyboard2.add(btn_conn2, btn_pod, btn_zabral)
                    self.bot.send_message(chat_id=res[0],
                                          text=f'‚ÑπÔ∏è {callback.from_user.first_name}, –í—ã –ø—Ä–∏–Ω—è–ª–∏ –∑–∞–∫–∞–∑!',
                                          reply_markup=keyboard2
                                          )
                    conn.commit()
                    conn.close()

                if callback.data == 'zabral':
                    keyboard2 = types.InlineKeyboardMarkup(row_width=1)
                    btn_end_order = types.InlineKeyboardButton(text='–ó–∞–≤–µ—Ä—à–∏—Ç—å –ø–æ–µ–∑–¥–∫—É',
                                                               callback_data='end_order'
                                                               )
                    keyboard2.add(btn_end_order)
                    self.bot.edit_message_text(chat_id=res[0],
                                               message_id=callback.message.id,
                                               text=f'‚ÑπÔ∏è {callback.from_user.first_name}, –í—ã –∑–∞–±—Ä–∞–ª–∏ –∑–∞–∫–∞–∑—á–∏–∫–∞!',
                                               reply_markup=keyboard2
                                               )

            if callback.data == 'end_order':

                conn = sqlite3.connect('TAXIdata.db')
                cursor = conn.cursor()
                cursor.execute(f"SELECT id FROM making_orders WHERE who_accept = ?",
                               (callback.from_user.username,))
                userid = cursor.fetchone()
                cursor.execute(
                    f"SELECT username, phone_number, user_adress, end_adress, sale, message_id FROM making_orders WHERE id = ?",
                    (userid[0],))
                orderd = cursor.fetchone()
                cursor.execute(f"SELECT fio FROM drivers WHERE id = ?",
                               (callback.message.chat.id,))
                fio = cursor.fetchone()
                cdate = date.today()
                now = datetime.now()
                ctime = now.strftime("%H:%M")
                osale = ''
                if orderd[4] is None:
                    osale = '100—Ä'
                cursor.execute(f"INSERT INTO orders"
                               f"(customer_phone,"
                               f"driver,"
                               f"date,"
                               f"time,"
                               f"user_adress,"
                               f"end_adress,"
                               f"sale)"
                               f"VALUES (?, ?, ?, ?, ?, ?, ?)",
                               (orderd[1], fio[0], cdate, ctime, orderd[2], orderd[3], osale))
                cursor.execute(f"SELECT ordermid FROM making_orders WHERE who_accept = ?",
                               (callback.from_user.username,))
                omid = cursor.fetchone()
                keyboard1 = types.InlineKeyboardMarkup(row_width=1)
                btn_mmain = types.InlineKeyboardButton(text='–ú–µ–Ω—é',
                                                       callback_data='main'
                                                       )
                keyboard1.add(btn_mmain)
                self.bot.edit_message_text(chat_id=userid[0],
                                           message_id=omid[0],
                                           text='–ó–∞–∫–∞–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!',
                                           reply_markup=keyboard1
                                           )
                keyboard = types.InlineKeyboardMarkup(row_width=1)
                btn_status_1 = types.InlineKeyboardButton(text='–ó–∞–∫–æ–Ω—á–∏—Ç—å —Ä–∞–±–æ—Ç—É',
                                                          callback_data='status_2'
                                                          )
                keyboard.add(btn_status_1)
                self.bot.edit_message_text(chat_id=callback.message.chat.id,
                                           message_id=callback.message.id,
                                           text=f'‚ÑπÔ∏è {callback.from_user.first_name}, –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞–∫–∞–∑—ã!'
                                                f'\n–°—Ç–∞—Ç—É—Å: "–†–∞–±–æ—Ç–∞–µ—Ç–µ"',
                                           reply_markup=keyboard
                                           )
                if orderd[5] is not None:
                    self.bot.delete_message(chat_id=callback.message.chat.id,
                                            message_id=callback.message.id - 2
                                            )
                    self.bot.delete_message(chat_id=callback.message.chat.id,
                                            message_id=callback.message.id - 1
                                            )

                cursor.execute(f"UPDATE making_orders SET who_accept = NULL where who_accept = ?",
                               (callback.from_user.username,))

                conn.commit()
                conn.close()

            if callback.data == 'accept_reg':
                try:
                    self.bot.edit_message_text(chat_id=callback.message.chat.id,
                                               message_id=callback.message.id,
                                               text='‚ÑπÔ∏è –ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!'
                                               )
                    conn = sqlite3.connect('TAXIdata.db')
                    cursor = conn.cursor()
                    cursor.execute(f"SELECT id FROM making_orders WHERE key = '1'")
                    uid = cursor.fetchone()
                    keyboard = types.InlineKeyboardMarkup(row_width=1)
                    btn_anketa1 = types.InlineKeyboardButton(text='–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É',
                                                             callback_data='anketa'
                                                             )
                    keyboard.add(btn_anketa1)
                    self.bot.send_message(chat_id=uid[0],
                                          text=f'‚ÑπÔ∏è –ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!'
                                               f'\n–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É –≤–æ–¥–∏—Ç–µ–ª—è',
                                          reply_markup=keyboard
                                          )

                    cursor.execute(f"UPDATE making_orders SET key = NULL")
                    conn.commit()
                    conn.close()
                except:
                    pass

            if callback.data == 'reject_reg':
                try:
                    self.bot.edit_message_text(chat_id=callback.message.chat.id,
                                               message_id=callback.message.id,
                                               text='‚ÑπÔ∏è –ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω!'
                                               )
                    conn = sqlite3.connect('TAXIdata.db')
                    cursor = conn.cursor()
                    cursor.execute(f"SELECT id FROM making_orders WHERE key = '1'")
                    uid = cursor.fetchone()
                    self.bot.send_message(chat_id=uid[0],
                                          text=f'‚ÑπÔ∏è –ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω!'
                                          )
                    cursor.execute(f"UPDATE making_orders SET key = NULL")
                    conn.commit()
                    conn.close()
                except:
                    pass

            if callback.data == 'anketa':

                conn = sqlite3.connect('TAXIdata.db')
                cursor = conn.cursor()
                cursor.execute("SELECT * FROM drivers WHERE id = ?", (callback.message.chat.id,))
                row = cursor.fetchone()
                if row is None:
                    cursor.execute("INSERT INTO drivers (id) VALUES (?)", (callback.message.chat.id,))
                    cursor.execute(
                        f"SELECT username, phone_number FROM making_orders WHERE id = {callback.message.chat.id}")
                    ph = cursor.fetchone()
                    cursor.execute(f"UPDATE drivers SET username = ? WHERE id = ?",
                                   (ph[0], callback.message.chat.id,))
                    cursor.execute(f"UPDATE drivers SET phone_number = ? WHERE id = ?",
                                   (ph[1], callback.message.chat.id,))
                conn.commit()

                keyboard = types.InlineKeyboardMarkup()
                btn_point_name = types.InlineKeyboardButton(text='–§–ò–û',
                                                            callback_data='fio'
                                                            )
                btn_point_car = types.InlineKeyboardButton(text='–ú–∞—à–∏–Ω–∞',
                                                           callback_data='car'
                                                           )
                btn_gosnumber = types.InlineKeyboardButton(text='–ì–æ—Å–Ω–æ–º–µ—Ä –∞–≤—Ç–æ',
                                                           callback_data='gosnumber'
                                                           )
                btn_done = types.InlineKeyboardButton(text='–ì–æ—Ç–æ–≤–æ',
                                                      callback_data='done_anketa'
                                                      )
                keyboard.add(btn_point_name,
                             btn_point_car
                             )
                keyboard.add(btn_gosnumber)
                keyboard.add(btn_done)

                cursor.execute(
                    f"SELECT fio, car, state_number FROM drivers WHERE id = {callback.message.chat.id}")
                data = cursor.fetchone()
                if data[0] is None:
                    name = '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
                else:
                    name = data[0]

                if data[1] is None:
                    car = '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
                else:
                    car = data[1]

                if data[2] is None:
                    gosnumber = '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
                else:
                    gosnumber = data[2]

                self.bot.edit_message_text(chat_id=callback.message.chat.id,
                                           message_id=callback.message.id,
                                           text=f'‚ÑπÔ∏è {callback.from_user.first_name}, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É –≤–æ–¥–∏—Ç–µ–ª—è.'
                                                f'\n–§–ò–û: {name}'
                                                f'\n–ê–≤—Ç–æ–º–æ–±–∏–ª—å: {car}'
                                                f'\n–ì–æ—Å.–Ω–æ–º–µ—Ä: {gosnumber}',
                                           reply_markup=keyboard
                                           )

            if callback.data == 'fio':
                self.bot.edit_message_text(chat_id=callback.message.chat.id,
                                           message_id=callback.message.id,
                                           text=f'‚ÑπÔ∏è {callback.from_user.first_name}, –∫–∞–∫ –í–∞—Å –∑–æ–≤—É—Ç?'
                                                f'\n–§–∞–º–∏–ª–∏—è - –∏–º—è - –æ—Ç—á–µ—Å—Ç–≤–æ',
                                           )
                self.bot.register_next_step_handler(callback.message, get_driver_fio)

            if callback.data == 'car':
                self.bot.edit_message_text(chat_id=callback.message.chat.id,
                                           message_id=callback.message.id,
                                           text=f'‚ÑπÔ∏è {callback.from_user.first_name}, –∫–∞–∫–∞—è —É –í–∞—Å –º–∞—à–∏–Ω–∞?'
                                                f'\n–¶–≤–µ—Ç - –º–∞—Ä–∫–∞ - –º–æ–¥–µ–ª—å',
                                           )
                self.bot.register_next_step_handler(callback.message, get_driver_car)

            if callback.data == 'gosnumber':
                self.bot.edit_message_text(chat_id=callback.message.chat.id,
                                           message_id=callback.message.id,
                                           text=f'‚ÑπÔ∏è {callback.from_user.first_name}, –∫–∞–∫–æ–π —É –í–∞—Å –≥–æ—Å.–Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è?'
                                                f'\n–¶–≤–µ—Ç - –º–∞—Ä–∫–∞ - –º–æ–¥–µ–ª—å',
                                           )
                self.bot.register_next_step_handler(callback.message, get_driver_gosnumber)

            if callback.data == 'done_anketa':

                conn = sqlite3.connect('TAXIdata.db')
                cursor = conn.cursor()
                cursor.execute(
                    f"SELECT fio, car, state_number FROM drivers WHERE id = {callback.message.chat.id}")
                data = cursor.fetchone()
                if data[0] is None or data[1] is None or data[2] is None:
                    keyboard = types.InlineKeyboardMarkup()
                    btn_anketa2 = types.InlineKeyboardButton(text='–ó–∞–ø–æ–ª–Ω–∏—Ç—å',
                                                             callback_data='anketa'
                                                             )
                    keyboard.add(btn_anketa2)
                    self.bot.edit_message_text(chat_id=callback.message.chat.id,
                                               message_id=callback.message.id,
                                               text=f'‚ÑπÔ∏è {callback.from_user.first_name}, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã!',
                                               reply_markup=keyboard
                                               )
                else:
                    cursor.execute(f"UPDATE drivers SET status = ? WHERE id = ?",
                                   (0, callback.message.chat.id,))
                    cursor.execute(f"UPDATE drivers SET order_status = ? WHERE id = ?",
                                   (1, callback.message.chat.id,))
                    conn.commit()
                    conn.close()
                    keyboard = types.InlineKeyboardMarkup()
                    btn_start = types.InlineKeyboardButton(text='–ù–∞—á–∞—Ç—å',
                                                           callback_data='driver_main'
                                                           )
                    keyboard.add(btn_start)
                    self.bot.edit_message_text(chat_id=callback.message.chat.id,
                                               message_id=callback.message.id,
                                               text=f'‚ÑπÔ∏è {callback.from_user.first_name}, —É—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è!',
                                               reply_markup=keyboard
                                               )

            if callback.data == 'driver_main':
                # conn = sqlite3.connect('TAXIdata.db')
                # cursor = conn.cursor()
                # cursor.execute(f"SELECT fio FROM drivers WHERE id = {callback.message.chat.id}")
                # name = cursor.fetchone()
                keyboard = types.InlineKeyboardMarkup(row_width=1)
                btn_status_1 = types.InlineKeyboardButton(text='–†–∞–±–æ—Ç–∞—é',
                                                          callback_data='status_1'
                                                          )
                btn_status_2 = types.InlineKeyboardButton(text='–ù–µ —Ä–∞–±–æ—Ç–∞—é',
                                                          callback_data='status_2'
                                                          )
                keyboard.add(btn_status_1,
                             btn_status_2
                             )
                self.bot.edit_message_text(chat_id=callback.message.chat.id,
                                           message_id=callback.message.id,
                                           text=f'‚ÑπÔ∏è –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é –≤–æ–¥–∏—Ç–µ–ª–µ–π'
                                                f'\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Å—Ç–∞—Ç—É—Å',
                                           reply_markup=keyboard
                                           )
            if callback.data == 'status_1' or callback.data == 'status_2':

                conn = sqlite3.connect('TAXIdata.db')
                cursor = conn.cursor()
                cursor.execute(f"UPDATE drivers SET username = ? WHERE id = ?",
                               (callback.from_user.username, callback.message.chat.id))
                conn.commit()
                keyboard = types.InlineKeyboardMarkup(row_width=1)
                btn_work = types.InlineKeyboardButton(text='–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É',
                                                      callback_data='status_1',
                                                      )
                btn_no_work = types.InlineKeyboardButton(text='–ó–∞–∫–æ–Ω—á–∏—Ç—å —Ä–∞–±–æ—Ç—É',
                                                         callback_data='status_2',
                                                         )
                if callback.data == 'status_1':
                    cursor.execute(f"UPDATE drivers SET status = ? WHERE id = ?",
                                   (1, callback.message.chat.id,)
                                   )
                    keyboard.add(btn_no_work)
                    self.bot.edit_message_text(chat_id=callback.message.chat.id,
                                               message_id=callback.message.id,
                                               text=f'‚ÑπÔ∏è {callback.from_user.first_name}, –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞–∫–∞–∑—ã!'
                                                    f'\n–°—Ç–∞—Ç—É—Å: "–†–∞–±–æ—Ç–∞–µ—Ç–µ"',
                                               reply_markup=keyboard
                                               )

                if callback.data == 'status_2':
                    cursor.execute(f"UPDATE drivers SET status = ? WHERE id = ?",
                                   (0, callback.message.chat.id,)
                                   )
                    cursor.execute(f"UPDATE drivers SET order_status = ? WHERE id = ?",
                                   (0, callback.message.chat.id,)
                                   )

                    keyboard.add(btn_work)
                    self.bot.edit_message_text(chat_id=callback.message.chat.id,
                                               message_id=callback.message.id,
                                               text=f'‚ÑπÔ∏è {callback.from_user.first_name}, –í—ã –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ –∑–∞–∫–∞–∑—ã!'
                                                    f'\n–°—Ç–∞—Ç—É—Å: "–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç–µ"',
                                               reply_markup=keyboard
                                               )
                conn.commit()
                conn.close()

            if callback.data == 'otchet':

                conn = sqlite3.connect('TAXIdata.db')
                cursor = conn.cursor()
                cursor.execute(f"UPDATE making_orders SET page = ? WHERE id = ?",
                               (0, callback.message.chat.id,))
                cursor.execute(f"SELECT date, time1, time2 FROM making_orders WHERE id = ?",
                               (callback.message.chat.id,))
                ddmm = cursor.fetchone()
                if ddmm[0] is None:
                    dt = '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
                else:
                    dt = ddmm[0]
                if ddmm[1] is None:
                    tm1 = '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
                else:
                    tm1 = ddmm[1]
                if ddmm[2] is None:
                    tm2 = '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
                else:
                    tm2 = ddmm[2]

                keyboard = types.InlineKeyboardMarkup(row_width=1)
                btn_time = types.InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è',
                                                      callback_data='time'
                                                      )
                btn_date = types.InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É',
                                                      callback_data='day'
                                                      )
                btn_search = types.InlineKeyboardButton(text='–ü–æ–∏—Å–∫',
                                                        callback_data='search'
                                                        )
                btn_mmenu = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥',
                                                       callback_data='main'
                                                       )
                keyboard.add(btn_date,
                             btn_time,
                             btn_search,
                             btn_mmenu
                             )
                self.bot.edit_message_text(chat_id=callback.message.chat.id,
                                           message_id=callback.message.id,
                                           text=f'‚ÑπÔ∏è {callback.from_user.first_name}, –æ—Ç—á—ë—Ç –ø–æ –∫–∞–∫–∏–º —Ñ–∏–ª—å—Ç—Ä–∞–º –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å?'
                                                f'\n–î–∞—Ç–∞: {dt}'
                                                f'\n–ù–∞—á–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {tm1}'
                                                f'\n–ö–æ–Ω–µ—á–Ω–æ–µ –≤—Ä–µ–º—è: {tm2}',
                                           reply_markup=keyboard
                                           )
                conn.close()

            if callback.data == 'search' or callback.data == 'search_next':

                conn = sqlite3.connect('TAXIdata.db')
                cursor = conn.cursor()
                cursor.execute(f"SELECT date, time1, time2 FROM making_orders WHERE id = ?",
                               (callback.message.chat.id,))
                prm = cursor.fetchone()

                if callback.data == 'search':


                    keyboard1 = types.InlineKeyboardMarkup()
                    btn_otmm = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥',
                                                          callback_data='otchet'
                                                          )
                    keyboard1.add(btn_otmm)

                    if prm[0] is None:
                        self.bot.edit_message_text(chat_id=callback.message.chat.id,
                                                   message_id=callback.message.id,
                                                   text=f'‚ÑπÔ∏è {callback.from_user.first_name}, –¥–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –ª–∏–±–æ —Ç–∞–∫–æ–π –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.',
                                                   reply_markup=keyboard1
                                                   )
                    if prm[0] is not None:

                        if prm[1] is None:
                            self.bot.edit_message_text(chat_id=callback.message.chat.id,
                                                       message_id=callback.message.id,
                                                       text=f'‚ÑπÔ∏è {callback.from_user.first_name},–≤—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –ª–∏–±–æ —Ç–∞–∫–æ–≥–æ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.',
                                                       reply_markup=keyboard1
                                                       )
                    if prm[0] is not None and prm[1] is not None:
                        cursor.execute(
                            "SELECT * FROM orders WHERE date = ? AND time BETWEEN ? AND '23:59:59'",
                            (prm[0], prm[1],))
                        otc = cursor.fetchall()

                        if prm[0] is not None and prm[1] is not None and prm[2] is not None:
                            cursor.execute(
                                "SELECT order_number FROM orders WHERE date = ? AND time BETWEEN ? AND ?",
                                (prm[0], prm[1], prm[2],))
                            otc = cursor.fetchall()

                        k = 0
                        for row in otc:
                            k += 1
                        keyboard2 = types.InlineKeyboardMarkup()
                        btn_search_next = types.InlineKeyboardButton(text='–ü–æ–∫–∞–∑–∞—Ç—å',
                                                                     callback_data='search_next',
                                                                     )
                        btn_otmena = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥',
                                                                callback_data='otchet'
                                                                )
                        keyboard2.add(btn_search_next,
                                      btn_otmena
                                      )
                        self.bot.edit_message_text(chat_id=callback.message.chat.id,
                                                   message_id=callback.message.id,
                                                   text=f'‚ÑπÔ∏è {callback.from_user.first_name}, –∑–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –±—ã–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: {k}',
                                                   reply_markup=keyboard2
                                                   )
                        cursor.execute(f"UPDATE making_orders SET page = ? WHERE id = ?",
                                       (0, callback.message.chat.id,))
                    conn.commit()
                    conn.close()

                if callback.data == 'search_next':

                    conn = sqlite3.connect('TAXIdata.db')
                    cursor = conn.cursor()

                    keyboard1 = types.InlineKeyboardMarkup()
                    btn_next = types.InlineKeyboardButton(text='–°–ª–µ–¥—É—é—â–∏–π –∑–∞–∫–∞–∑',
                                                          callback_data='search_next'
                                                          )
                    btn_otmenna = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥',
                                                             callback_data='otchet'
                                                             )
                    keyboard1.add(btn_next,
                                 btn_otmenna
                                 )
                    cursor.execute(f"UPDATE making_orders SET page=page+1")
                    conn.commit()
                    cursor.execute(f"SELECT page FROM making_orders WHERE id = ?",
                                   (callback.message.chat.id,))
                    st = cursor.fetchone()
                    print(st[0])
                    if prm[0] is not None and prm[1] is not None:
                        cursor.execute(
                            "SELECT * FROM orders WHERE date = ? AND time BETWEEN ? AND '23:59:59'",
                            (prm[0], prm[1],))
                        otc = cursor.fetchall()

                        if prm[0] is not None and prm[1] is not None and prm[2] is not None:
                            cursor.execute(
                                "SELECT * FROM orders WHERE date = ? AND time BETWEEN ? AND ?",
                                (prm[0], prm[1], prm[2],))
                            otc = cursor.fetchall()

                        k = 0
                        for row in otc:
                            k += 1
                        print(otc[0][1])
                    self.bot.send_message(chat_id=callback.message.chat.id,
                                          text=f'‚ÑπÔ∏è {callback.from_user.first_name}, –∑–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –±—ã–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: {k}'
                                               f'\n–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {otc[st[0]][0]}'
                                               f'\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∑–∞–∫–∞–∑—á–∏–∫–∞: {otc[st[0]][1]}'
                                               f'\n–í–æ–¥–∏—Ç–µ–ª—å: {otc[st[0]][2]}'
                                               f'\n–î–∞—Ç–∞: {otc[st[0]][3]}'
                                               f'\n–í—Ä–µ–º—è: {otc[st[0]][4]}'
                                               f'\n–ê–¥—Ä–µ—Å: {otc[st[0]][5]}'
                                               f'\n–ö–æ–Ω–µ—á–Ω—ã–π –∞–¥—Ä–µ—Å: {otc[st[0]][6]}'
                                               f'\n–°—Ç–æ–∏–º–æ—Å—Ç—å: {otc[st[0]][7]}'
                                               f'\n\n–°—Ç—Ä–∞–Ω–∏—Ü–∞: {st[0]}/{k}',
                                          reply_markup=keyboard1
                                          )

            if callback.data == 'day':

                keyboard = types.InlineKeyboardMarkup()
                btn_otm = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥',
                                                     callback_data='otchet'
                                                     )
                keyboard.add(btn_otm)
                self.bot.edit_message_text(chat_id=callback.message.chat.id,
                                           message_id=callback.message.id,
                                           text=f'‚ÑπÔ∏è {callback.from_user.first_name}, —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ'
                                                f'\n"–ì–ì–ì–ì-–ú–ú-–î–î", –Ω–∞–ø—Ä–∏–º–µ—Ä "2023-11-23"',
                                           reply_markup=None
                                           )
                self.bot.register_next_step_handler(callback.message, get_date)

            if callback.data == 'time':

                keyboard = types.InlineKeyboardMarkup()
                btn_time1 = types.InlineKeyboardButton(text='–ù–∞—á–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è',
                                                       callback_data='time1'
                                                       )
                btn_time2 = types.InlineKeyboardButton(text='–ö–æ–Ω–µ—á–Ω–æ–µ –≤—Ä–µ–º—è',
                                                       callback_data='time2'
                                                       )
                btn_otm = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥',
                                                     callback_data='otchet'
                                                     )
                keyboard.add(btn_otm,
                             btn_time1,
                             btn_time2
                             )
                self.bot.edit_message_text(chat_id=callback.message.chat.id,
                                           message_id=callback.message.id,
                                           text=f'‚ÑπÔ∏è {callback.from_user.first_name}, –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏ —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è, –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∞—á–∏–Ω–∞—Ç—å –ø–æ–∏—Å–∫, –∏ –∫–∞–∫–∏–º –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å.',
                                           reply_markup=keyboard
                                           )

            if callback.data == 'time1' or callback.data == 'time2':

                if callback.data == 'time1':
                    keyboard = types.InlineKeyboardMarkup()
                    btn_otm = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥',
                                                         callback_data='otchet'
                                                         )
                    keyboard.add(btn_otm)
                    self.bot.edit_message_text(chat_id=callback.message.chat.id,
                                               message_id=callback.message.id,
                                               text=f'‚ÑπÔ∏è {callback.from_user.first_name}, —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è, –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∞—á–∏–Ω–∞—Ç—å –ø–æ–∏—Å–∫.',
                                               reply_markup=None
                                               )
                    self.bot.register_next_step_handler(callback.message, get_time1)

                if callback.data == 'time2':
                    keyboard = types.InlineKeyboardMarkup()
                    btn_otm = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥',
                                                         callback_data='otchet'
                                                         )
                    keyboard.add(btn_otm)
                    self.bot.edit_message_text(chat_id=callback.message.chat.id,
                                               message_id=callback.message.id,
                                               text=f'‚ÑπÔ∏è {callback.from_user.first_name}, —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è, –∫–æ—Ç–æ—Ä—ã–º –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å –ø–æ–∏—Å–∫.',
                                               reply_markup=None
                                               )
                    self.bot.register_next_step_handler(callback.message, get_time2)

        """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è —á–∞—Å—Ç—å"""

        @self.bot.message_handler(content_types=['location'])
        def get_user_adress_auto(message):
            if message.from_user.username is None:
                keyboard = types.InlineKeyboardMarkup(row_width=1)
                btn_how = types.InlineKeyboardButton(text='–ö–∞–∫ —É–∫–∞–∑–∞—Ç—å?',
                                                     callback_data='how'
                                                     )
                keyboard.add(btn_how)
                self.bot.send_message(chat_id=message.chat.id,
                                      text=f'‚ÑπÔ∏è {message.from_user.first_name}, –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–∏—Å–∞ —É –≤–∞—Å –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –¥–æ–ª–∂–Ω–æ'
                                           f'–±—ã—Ç—å —É–∫–∞–∑–∞–Ω–æ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!',
                                      reply_markup=keyboard
                                      )
            else:
                conn = sqlite3.connect('TAXIdata.db')
                cursor = conn.cursor()
                cursor.execute("SELECT * FROM making_orders WHERE id = ?", (message.chat.id,))
                result = cursor.fetchone()
                if result is None:
                    self.bot.send_message(chat_id=message.chat.id,
                                          text=f'{message.from_user.first_name}, –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞!'
                                          )
                else:

                    if message.location is not None:

                        location = f'{message.location.longitude}, {message.location.latitude}'

                        cursor.execute("UPDATE making_orders SET message_id = ?, user_adress = ? WHERE id = ?",
                                       (message.message_id, location, message.chat.id)
                                       )
                        try:
                            cursor.execute(
                                f"SELECT del_msg_id, del_msg_id2 FROM making_orders WHERE id = {message.chat.id}")
                            delmsg = cursor.fetchone()
                            self.bot.delete_message(chat_id=message.chat.id,
                                                    message_id=delmsg[0]
                                                    )
                            self.bot.delete_message(chat_id=message.chat.id,
                                                    message_id=delmsg[1]
                                                    )
                        except:
                            pass
                        conn.commit()
                        conn.close()
                        keyboard = types.InlineKeyboardMarkup(row_width=2)
                        btn_next = types.InlineKeyboardButton(text='–î–∞–ª–µ–µ ‚ñ∂Ô∏è',
                                                              callback_data='order'
                                                              )
                        keyboard.add(btn_next)
                        self.bot.send_message(chat_id=message.chat.id,
                                              text=f'‚ÑπÔ∏è {message.from_user.first_name}, –í–∞—à –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–µ–Ω',
                                              reply_markup=keyboard
                                              )

        def get_user_adress_manually(message):

            conn = sqlite3.connect('TAXIdata.db')
            cursor = conn.cursor()

            cursor.execute(f"SELECT del_msg_id FROM making_orders WHERE id = {message.chat.id}")
            delmsg = cursor.fetchone()
            try:
                self.bot.delete_message(chat_id=message.chat.id,
                                        message_id=delmsg[0]
                                        )
            except:
                pass
            cursor.execute("UPDATE making_orders SET user_adress = ? WHERE id = ?",
                           (message.text, message.chat.id)
                           )
            conn.commit()
            conn.close()

            keyboard = types.InlineKeyboardMarkup(row_width=2)
            btn_next = types.InlineKeyboardButton(text='–î–∞–ª–µ–µ ‚ñ∂Ô∏è',
                                                  callback_data='order'
                                                  )
            keyboard.add(btn_next)
            self.bot.send_message(chat_id=message.chat.id,
                                  text=f'‚ÑπÔ∏è {message.from_user.first_name}, –í–∞—à –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–µ–Ω',
                                  reply_markup=keyboard
                                  )

            conn.close()

        def get_end_adress(message):

            conn = sqlite3.connect('TAXIdata.db')
            cursor = conn.cursor()
            cursor.execute(f"SELECT del_msg_id FROM making_orders WHERE id = {message.chat.id}")
            delmsg = cursor.fetchone()
            try:
                self.bot.delete_message(chat_id=message.chat.id,
                                        message_id=delmsg[0]
                                        )
            except:
                pass
            cursor.execute("UPDATE making_orders SET end_adress = ? WHERE id = ?",
                           (message.text, message.chat.id)
                           )
            conn.commit()
            conn.close()

            keyboard = types.InlineKeyboardMarkup(row_width=1)
            btn_next = types.InlineKeyboardButton(text='–î–∞–ª–µ–µ ‚ñ∂Ô∏è',
                                                  callback_data='order'
                                                  )
            keyboard.add(btn_next)
            self.bot.send_message(chat_id=message.chat.id,
                                  text=f'‚ÑπÔ∏è {message.from_user.first_name}, –∫–æ–Ω–µ—á–Ω—ã–π –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–µ–Ω',
                                  reply_markup=keyboard
                                  )

        def message_for_driver(message):

            conn = sqlite3.connect('TAXIdata.db')
            cursor = conn.cursor()
            cursor.execute(f"SELECT del_msg_id FROM making_orders WHERE id = {message.chat.id}")
            delmsg = cursor.fetchone()
            try:
                self.bot.delete_message(chat_id=message.chat.id,
                                        message_id=delmsg[0]
                                        )
            except:
                pass
            cursor.execute("UPDATE making_orders SET message = ? WHERE id = ?",
                           (message.text, message.chat.id)
                           )
            conn.commit()
            conn.close()
            keyboard = types.InlineKeyboardMarkup(row_width=1)
            btn_next = types.InlineKeyboardButton(text='–î–∞–ª–µ–µ',
                                                  callback_data='order'
                                                  )
            keyboard.add(btn_next)
            self.bot.send_message(chat_id=message.chat.id,
                                  text=f'‚ÑπÔ∏è {message.from_user.first_name}, —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –≤–æ–¥–∏—Ç–µ–ª—é.',
                                  reply_markup=keyboard
                                  )

        def give_user_sale(message):

            conn = sqlite3.connect('TAXIdata.db')
            cursor = conn.cursor()
            cursor.execute(f"SELECT del_msg_id FROM making_orders WHERE id = {message.chat.id}")
            delmsg = cursor.fetchone()
            try:
                self.bot.delete_message(chat_id=message.chat.id,
                                        message_id=delmsg[0]
                                        )
            except:
                pass
            cursor.execute("UPDATE making_orders SET sale = ? WHERE id = ?",
                           (message.text, message.chat.id)
                           )
            conn.commit()
            conn.close()
            keyboard = types.InlineKeyboardMarkup(row_width=1)
            btn_next = types.InlineKeyboardButton(text='–î–∞–ª–µ–µ',
                                                  callback_data='order'
                                                  )
            keyboard.add(btn_next)
            self.bot.send_message(chat_id=message.chat.id,
                                  text=f'‚ÑπÔ∏è {message.from_user.first_name}, —Å—Ç–æ–∏–º–æ—Å—Ç—å —É–∫–∞–∑–∞–Ω–∞.',
                                  reply_markup=keyboard
                                  )

        """–í–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è —á–∞—Å—Ç—å"""

        def get_driver_fio(message):

            conn = sqlite3.connect('TAXIdata.db')
            cursor = conn.cursor()
            cursor.execute("UPDATE drivers SET fio = ? WHERE id = ?",
                           (message.text, message.chat.id)
                           )
            conn.commit()
            conn.close()

            keyboard = types.InlineKeyboardMarkup()
            btn_next = types.InlineKeyboardButton(text='–î–∞–ª–µ–µ',
                                                  callback_data='anketa'
                                                  )
            keyboard.add(btn_next)
            self.bot.send_message(chat_id=message.chat.id,
                                  text='–û—Ç–ª–∏—á–Ω–æ!',
                                  reply_markup=keyboard
                                  )

        def get_driver_car(message):

            conn = sqlite3.connect('TAXIdata.db')
            cursor = conn.cursor()
            cursor.execute("UPDATE drivers SET car = ? WHERE id = ?",
                           (message.text, message.chat.id)
                           )
            conn.commit()
            conn.close()

            keyboard = types.InlineKeyboardMarkup()
            btn_next = types.InlineKeyboardButton(text='–î–∞–ª–µ–µ',
                                                  callback_data='anketa'
                                                  )
            keyboard.add(btn_next)
            self.bot.send_message(chat_id=message.chat.id,
                                  text='–û—Ç–ª–∏—á–Ω–æ!',
                                  reply_markup=keyboard
                                  )

        def get_driver_gosnumber(message):

            conn = sqlite3.connect('TAXIdata.db')
            cursor = conn.cursor()
            cursor.execute("UPDATE drivers SET state_number = ? WHERE id = ?",
                           (message.text, message.chat.id)
                           )
            conn.commit()
            conn.close()

            keyboard = types.InlineKeyboardMarkup()
            btn_next = types.InlineKeyboardButton(text='–î–∞–ª–µ–µ',
                                                  callback_data='anketa'
                                                  )
            keyboard.add(btn_next)
            self.bot.send_message(chat_id=message.chat.id,
                                  text='–û—Ç–ª–∏—á–Ω–æ!',
                                  reply_markup=keyboard
                                  )

        def get_date(message):

            conn = sqlite3.connect('TAXIdata.db')
            cursor = conn.cursor()
            cursor.execute("UPDATE making_orders SET date = ? WHERE id = ?",
                           (message.text, message.chat.id)
                           )
            conn.commit()
            conn.close()

            keyboard = types.InlineKeyboardMarkup()
            btn_next = types.InlineKeyboardButton(text='–î–∞–ª–µ–µ',
                                                  callback_data='otchet'
                                                  )
            keyboard.add(btn_next)
            self.bot.send_message(chat_id=message.chat.id,
                                  text='–î–∞—Ç–∞ —É–∫–∞–∑–∞–Ω–∞!',
                                  reply_markup=keyboard
                                  )

        def get_time1(message):

            conn = sqlite3.connect('TAXIdata.db')
            cursor = conn.cursor()
            cursor.execute("UPDATE making_orders SET time1 = ? WHERE id = ?",
                           (message.text, message.chat.id)
                           )
            conn.commit()
            conn.close()

            keyboard = types.InlineKeyboardMarkup()
            btn_next = types.InlineKeyboardButton(text='–î–∞–ª–µ–µ',
                                                  callback_data='otchet'
                                                  )
            keyboard.add(btn_next)
            self.bot.send_message(chat_id=message.chat.id,
                                  text='–í—Ä–µ–º—è —É–∫–∞–∑–∞–Ω–æ!',
                                  reply_markup=keyboard
                                  )

        def get_time2(message):

            conn = sqlite3.connect('TAXIdata.db')
            cursor = conn.cursor()
            cursor.execute("UPDATE making_orders SET time2 = ? WHERE id = ?",
                           (message.text, message.chat.id)
                           )
            conn.commit()
            conn.close()

            keyboard = types.InlineKeyboardMarkup()
            btn_next = types.InlineKeyboardButton(text='–î–∞–ª–µ–µ',
                                                  callback_data='otchet'
                                                  )
            keyboard.add(btn_next)
            self.bot.send_message(chat_id=message.chat.id,
                                  text='–í—Ä–µ–º—è —É–∫–∞–∑–∞–Ω–æ!',
                                  reply_markup=keyboard
                                  )

        @self.bot.message_handler(commands=['regdriver'])
        def regdriver(message):
            try:
                conn = sqlite3.connect('TAXIdata.db')
                cursor = conn.cursor()
                cursor.execute(f"UPDATE making_orders SET key = ? WHERE id = ?",
                               (1, message.chat.id,))
                self.bot.send_message(chat_id=message.chat.id,
                                      text=f'‚ÑπÔ∏è {message.from_user.first_name}, –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!'
                                           f'\n–Ø —É–≤–µ–¥–æ–º–ª—é –≤–∞—Å, –∫–æ–≥–¥–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç –µ–≥–æ..'
                                      )
                cursor.execute(f"SELECT id FROM making_orders WHERE permissions = 'administrator'")
                pid = cursor.fetchone()
                cursor.execute(f"SELECT username FROM making_orders WHERE id = {message.chat.id}")
                um = cursor.fetchone()
                keyboard = types.InlineKeyboardMarkup(row_width=2)
                btn_accept_reg = types.InlineKeyboardButton(text='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å',
                                                            callback_data='accept_reg'
                                                            )
                btn_reject_reg = types.InlineKeyboardButton(text='–û—Ç–∫–ª–æ–Ω–∏—Ç—å',
                                                            callback_data='reject_reg'
                                                            )
                keyboard.add(btn_accept_reg,
                             btn_reject_reg
                             )
                self.bot.send_message(chat_id=pid[0],
                                      text=f'‚ÑπÔ∏è {message.from_user.first_name}, –±—ã–ª–æ –∑–∞–ø—Ä–æ—à–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º @{um[0]}.',
                                      reply_markup=keyboard
                                      )
                conn.commit()
                conn.close()
            except:
                pass



        self.bot.polling(none_stop=True)


if __name__ == "__main__":
    # try:
    token = config_taxibot.token
    bot = Bot(token)
    bot.start()

#         while True:
#             try:
#                 await self.bot.polling()
#             except Exception:
#                 await asyncio.sleep(5)
#
#
#
# if __name__ == "__main__":
#     token = config_taxibot.token
#     bot = Bot(token)
#     asyncio.run(bot.start())
